// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ✅ Words Table (Matches `words` in database specs)
model Word {
  id            Int      @id @default(autoincrement())
  thai          String   @unique
  romanized     String
  english       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  wordReviews   WordReview?
  wordGroups    WordsInGroups[]
  studyResults  StudyResult[]
}

// ✅ Groups Table (Matches `groups` in database specs)
model Group {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  wordsCount  Int      @default(0) // ✅ Added from DB specs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  words       WordsInGroups[]
  studySessions StudySession[]
}

// ✅ Many-to-Many Relationship Table (Matches `word_groups`)
model WordsInGroups {
  word      Word     @relation(fields: [wordId], references: [id])
  wordId    Int
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  addedAt   DateTime @default(now())

  @@id([wordId, groupId])
}

// ✅ Study Activities Table (Matches `study_activities`)
model StudyActivity {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  url         String   // ✅ Matches DB specs
  previewUrl  String?  // ✅ Matches DB specs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sessions    StudySession[]
}

// ✅ Study Sessions Table (Matches `study_sessions`)
model StudySession {
  id              Int           @id @default(autoincrement())
  group           Group         @relation(fields: [groupId], references: [id])
  groupId         Int
  studyActivity   StudyActivity @relation(fields: [studyActivityId], references: [id])
  studyActivityId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  studyResults    StudyResult[]
}

// ✅ Word Review Items Table (Matches `word_review_items`)
model StudyResult {
  id            Int          @id @default(autoincrement())
  studySession  StudySession @relation(fields: [studySessionId], references: [id])
  studySessionId Int
  word          Word         @relation(fields: [wordId], references: [id])
  wordId        Int
  correct       Boolean
  createdAt     DateTime     @default(now())
}

// ✅ Word Reviews Table (Matches `word_reviews`)
model WordReview {
  id            Int      @id @default(autoincrement())
  word          Word     @relation(fields: [wordId], references: [id])
  wordId        Int      @unique  // ✅ Ensure one Word -> one WordReview
  correctCount  Int      @default(0)
  wrongCount    Int      @default(0)
  lastReviewed  DateTime @default(now())
}
