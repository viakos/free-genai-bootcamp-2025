generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Word {
  id           Int             @id @default(autoincrement())
  thai         String          @unique
  romanized    String
  english      String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  studyResults StudyResult[]
  wordReviews  WordReview?
  wordGroups   WordsInGroups[]
}

model Group {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  wordsCount    Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  studySessions StudySession[]
  words         WordsInGroups[]
}

model WordsInGroups {
  wordId  Int
  groupId Int
  addedAt DateTime @default(now())
  group   Group    @relation(fields: [groupId], references: [id])
  word    Word     @relation(fields: [wordId], references: [id])

  @@id([wordId, groupId])
}

model StudyActivity {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  url         String
  previewUrl  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  description String?
  sessions    StudySession[]
}

model StudySession {
  id              Int           @id @default(autoincrement())
  groupId         Int
  studyActivityId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  endTime         DateTime?
  startTime       DateTime?
  studyResults    StudyResult[]
  studyActivity   StudyActivity @relation(fields: [studyActivityId], references: [id])
  group           Group         @relation(fields: [groupId], references: [id])
}

model StudyResult {
  id             Int          @id @default(autoincrement())
  studySessionId Int
  wordId         Int
  correct        Boolean
  createdAt      DateTime     @default(now())
  word           Word         @relation(fields: [wordId], references: [id])
  studySession   StudySession @relation(fields: [studySessionId], references: [id])
}

model WordReview {
  id           Int      @id @default(autoincrement())
  wordId       Int      @unique
  correctCount Int      @default(0)
  wrongCount   Int      @default(0)
  lastReviewed DateTime @default(now())
  word         Word     @relation(fields: [wordId], references: [id])
}
